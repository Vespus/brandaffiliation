-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "translations" (
	"id" serial PRIMARY KEY NOT NULL,
	"entity_type" varchar(20) NOT NULL,
	"entity_id" varchar(50) NOT NULL,
	"lang_code" varchar(10) NOT NULL,
	"text_value" text NOT NULL,
	CONSTRAINT "translations_entity_type_entity_id_lang_code_key" UNIQUE("entity_type","entity_id","lang_code")
);
--> statement-breakpoint
CREATE TABLE "scales" (
	"label" varchar(50) NOT NULL,
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "scales_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"scale_group_id" bigint
);
--> statement-breakpoint
CREATE TABLE "brand_scales" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "brand_scales_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"brand_id" integer,
	"scale_id" integer,
	"value" real,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "brand_scales" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "scale_groups" (
	"label" varchar(50) NOT NULL,
	"is_additional" boolean DEFAULT false NOT NULL,
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "scale_groups_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1)
);
--> statement-breakpoint
CREATE TABLE "ai_settings_default" (
	"id" serial PRIMARY KEY NOT NULL,
	"model" text NOT NULL,
	"temperature" real,
	"top_p" real,
	"max_tokens" integer DEFAULT 4000,
	"frequency_penalty" real,
	"presence_penalty" real,
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now(),
	"prompt" text,
	CONSTRAINT "ai_settings_default_model_key" UNIQUE("model")
);
--> statement-breakpoint
CREATE TABLE "ai_settings_user" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" uuid,
	"model" text NOT NULL,
	"temperature" real,
	"top_p" real,
	"max_tokens" integer,
	"frequency_penalty" real,
	"presence_penalty" real,
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now(),
	"prompt" text,
	CONSTRAINT "ai_settings_user_user_id_model_key" UNIQUE("user_id","model")
);
--> statement-breakpoint
CREATE TABLE "ai_providers" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "ai_providers_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"name" varchar DEFAULT '255',
	"code" varchar DEFAULT '255',
	"key" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	CONSTRAINT "ai_providers_code_key" UNIQUE("code")
);
--> statement-breakpoint
ALTER TABLE "ai_providers" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "ai_models" (
	"id" serial PRIMARY KEY NOT NULL,
	"provider_id" integer,
	"model_name" text NOT NULL,
	"name" text NOT NULL,
	"description" text,
	"is_active" boolean DEFAULT false NOT NULL,
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now(),
	CONSTRAINT "ai_models_model_name_key" UNIQUE("model_name")
);
--> statement-breakpoint
CREATE TABLE "characteristics" (
	"id" serial PRIMARY KEY NOT NULL,
	"brand_id" integer NOT NULL,
	"value" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE "brands" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"slug" varchar
);
--> statement-breakpoint
CREATE TABLE "user_prompts" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_prompts_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"user_id" uuid DEFAULT auth.uid(),
	"name" text,
	"prompt" text,
	"is_favorite" boolean DEFAULT false,
	"updated_at" timestamp DEFAULT now(),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "user_prompts" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_roles" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"user_id" uuid NOT NULL,
	"role" "app_role" NOT NULL,
	CONSTRAINT "user_roles_user_id_role_key" UNIQUE("user_id","role")
);
--> statement-breakpoint
ALTER TABLE "user_roles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "brand_scales" ADD CONSTRAINT "brand_scales_brand_id_fkey" FOREIGN KEY ("brand_id") REFERENCES "public"."brands"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "brand_scales" ADD CONSTRAINT "brand_scales_scale_id_fkey" FOREIGN KEY ("scale_id") REFERENCES "public"."scales"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "ai_settings_default" ADD CONSTRAINT "ai_settings_default_model_fkey" FOREIGN KEY ("model") REFERENCES "public"."ai_models"("model_name") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "ai_settings_user" ADD CONSTRAINT "ai_settings_user_model_fkey" FOREIGN KEY ("model") REFERENCES "public"."ai_models"("model_name") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "ai_settings_user" ADD CONSTRAINT "ai_settings_user_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "ai_models" ADD CONSTRAINT "ai_models_provider_id_fkey" FOREIGN KEY ("provider_id") REFERENCES "public"."ai_providers"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "characteristics" ADD CONSTRAINT "fk_brand" FOREIGN KEY ("brand_id") REFERENCES "public"."brands"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_prompts" ADD CONSTRAINT "user_prompts_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "similarity_gin" ON "characteristics" USING gin ("value" gin_trgm_ops);--> statement-breakpoint
CREATE INDEX "similarity_gist" ON "characteristics" USING gist ("value" gist_trgm_ops);--> statement-breakpoint
CREATE VIEW "public"."brand_with_scales" AS (SELECT brands.id, brands.name, max( CASE WHEN scales.label::text = 'price'::text THEN brand_scales.value ELSE NULL::real END) AS price, max( CASE WHEN scales.label::text = 'quality'::text THEN brand_scales.value ELSE NULL::real END) AS quality, max( CASE WHEN scales.label::text = 'focus'::text THEN brand_scales.value ELSE NULL::real END) AS focus, max( CASE WHEN scales.label::text = 'design'::text THEN brand_scales.value ELSE NULL::real END) AS design, max( CASE WHEN scales.label::text = 'positioning'::text THEN brand_scales.value ELSE NULL::real END) AS positioning, max( CASE WHEN scales.label::text = 'origin'::text THEN brand_scales.value ELSE NULL::real END) AS origin, max( CASE WHEN scales.label::text = 'heritage'::text THEN brand_scales.value ELSE NULL::real END) AS heritage, max( CASE WHEN scales.label::text = 'recognition'::text THEN brand_scales.value ELSE NULL::real END) AS recognition, max( CASE WHEN scales.label::text = 'revenue'::text THEN brand_scales.value ELSE NULL::real END) AS revenue, COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', c.id, 'value', c.value)) AS jsonb_agg FROM characteristics c WHERE c.brand_id = brands.id), '[]'::jsonb) AS characteristic, brands.slug FROM brands LEFT JOIN brand_scales ON brands.id = brand_scales.brand_id LEFT JOIN scales ON brand_scales.scale_id = scales.id GROUP BY brands.id, brands.name);--> statement-breakpoint
CREATE POLICY "Allow auth admin to read user roles" ON "user_roles" AS PERMISSIVE FOR SELECT TO "supabase_auth_admin" USING (true);
*/